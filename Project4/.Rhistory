}
significant_ones <- significant_cols_results %>%
filter(diffInMedian >= 0.1)
significant_ones <- significant_cols_results %>%
filter(diffInMedian >= 0.05)
View(significant_cols_results)
iterations = 35
totalMedian = 0
tolalMean = 0
significant_cols_results <- data.frame(diffInMedian=double(), diffInMean=double(), column=character())
for (j in 12:354){
for(i in 1:iterations) {
resampled_resistent <- sample_n(filter(resistent, !is.na(resistance)), 398, replace = T)
resampled_non_resistent <- sample_n(filter(non_resistent, !is.na(resistance)), 400, replace = T)
column <- colnames(resampled_non_resistent)[j]
totalMedian = totalMedian + apply(resampled_resistent[,column], 2, median)-apply(resampled_non_resistent[,column], 2, median)
totalMean = totalMedian + apply(resampled_resistent[,column], 2, mean)-apply(resampled_non_resistent[,column], 2, mean)
}
t = data.frame(abs(median(totalMedian)),abs(mean(totalMean)), column)
names(t)=c("diffInMedian","diffInMean","column")
significant_cols_results = rbind(significant_cols_results, t)
totalMedian = 0
totalMean = 0
}
View(significant_cols_results)
library(knn)
library(class)
knn.cv
resistent <- all.genes %>%
filter(resistance == "T")
non_resistent <- all.genes %>%
filter(resistance == "F")
non_resistent <- all.genes %>%
filter(resistance == "F")
train_resistent <- sample_n(filter(resistent, !is.na(resistance)), 350, replace = T)
train_non_resistent <- sample_n(filter(non_resistent, !is.na(resistance)), 500, replace = T)
train_resistent_non_resistent <- rbind(train_non_resistent, train_resistent)
train <- sample_n(filter(train_resistent_non_resistent, !is.na(resistance)), nrow(train_resistent_non_resistent)*0.8) #change this to 0.1 to make experiments faster
test <- suppressMessages(
anti_join(filter(train_resistent_non_resistent, !is.na(resistance)), train)
)
not_wanted_columns <- c("ID", "DESC", "DB_name", "plasmid_notPlasmid", "host","country", "isolation_source","start_position", "end_position", "strain", "strand", "specie")
resistent <- all.genes %>%
filter(resistance == "T")
non_resistent <- all.genes %>%
filter(resistance == "F")
train_resistent <- sample_n(filter(resistent, !is.na(resistance)), 350, replace = T)
train_non_resistent <- sample_n(filter(non_resistent, !is.na(resistance)), 500, replace = T)
train_resistent_non_resistent <- rbind(train_non_resistent, train_resistent)
train <- sample_n(filter(train_resistent_non_resistent, !is.na(resistance)), nrow(train_resistent_non_resistent)*0.8) #change this to 0.1 to make experiments faster
test <- suppressMessages(
anti_join(filter(train_resistent_non_resistent, !is.na(resistance)), train)
)
#### Remove all columns which are not numerical! Alg not converge if dont
train <- train[ , -which(names(train) %in% not_wanted_columns)]  #remove column by name
test <- test[ , -which(names(test) %in% not_wanted_columns)]  #remove column by name
colnames(test)
#remove all columns that have NAs because they cause error in building x, there should not be any...
train <- train[,colSums(is.na(train))<nrow(train)]
train <- na.omit(train)
nn3 <- kNN(resistance ~ .,train,test,norm=FALSE,k=3)
nn3 <- knn(resistance ~ .,train,test,norm=FALSE,k=3)
?knn
nn3 <- kNN(resistance ~ .,train,test,k=3)
nn3 <- knn(resistance ~ .,train,test,k=3)
nn3 <- knn(train, test, k=3)
nn3 <- knn(train, test, cl = resistance k=3)
nn3 <- knn(train, test, cl = resistance, k=3)
colnames(train)
nn3 <- knn(train, test, cl = resistance, k=3)
nn3 <- knn(train, test, cl = train$resistance, k=3)
nn3 <- knn(train, test, cl = train$resistance, k=5)
cl <- factor(train$resistance))
cl <- factor(train$resistance)
nn3 <- knn(train, test, cl = cl, k=5)
nn3 <- knn(train, test, cl = cl, k=5)
knn.cv(train, cl, k = 1, l = 0, prob = FALSE, use.all = TRUE)
knn.cv(train, cl = train$resistance, k = 1, l = 0, prob = FALSE, use.all = TRUE)
ctrl <- trainControl(method="repeatedcv",repeats = 3)
knnFit <- train(resistance ~ ., data = train, method = "knn", trControl = ctrl, preProcess = c("center","scale"), tuneLength = 20)
update.packages(ask=FALSE, checkBuilt = TRUE)
knnFit <- train(resistance ~ ., data = train, method = "knn", trControl = ctrl, preProcess = c("center","scale"), tuneLength = 20)
package_df <- as.data.frame(installed.packages("/Library/Frameworks/R.framework/Versions/2.15/Resources/library"))
package_list <- as.character(package_df$Package)
#Re-install Install packages
install.packages(package_list)
package_df <- as.data.frame(installed.packages("/Library/Frameworks/R.framework/Versions/2.15/Resources/library"))
package_list <- as.character(package_df$Package)
#Re-install Install packages
install.packages(package_list)
knitr::opts_chunk$set(echo = TRUE)
# install.packages("reticulate")  # needed for python run in Rmd
library(tidyverse)
library(caret)
library(MASS)
library(purrr)
library(tidyr)
library(earth)
library(ggplot2)
library(glmnet)
library(class) #knn
#source("https://bioconductor.org/biocLite.R")
#biocLite("qvalue")
library(qvalue)
knitr::opts_chunk$set(echo = TRUE)
# install.packages("reticulate")  # needed for python run in Rmd
library(tidyverse)
library(caret)
library(MASS)
library(purrr)
library(tidyr)
library(earth)
library(ggplot2)
library(glmnet)
library(class) #knn
#source("https://bioconductor.org/biocLite.R")
#biocLite("qvalue")
library(qvalue)
# Save csv file name as data frame name
temp <- list.files(path = "Data-Csv", pattern="*.csv")
df_names <- gsub("standardized", "", gsub("*.csv$", "", temp)) # remove "standardized" and .csv extension"
df_names <- make.names(df_names)    # replace problematic characters
# Load each csv file, set the proper name for it and store each in a variable (data.frame)
temp <- list.files(path = "Data-Csv", pattern="*.csv", full.names = T)
list2env(lapply(setNames(temp, df_names), read_csv), envir = .GlobalEnv)
Ecoli_IAI39 <- Ecoli_IAI39 %>%
mutate(strain = "IAI39", resistance = "F")
Ecoli_K12 <- Ecoli_K12 %>%
mutate(strain = "K12", resistance = "F")
EColi_O104.H4 <- EColi_O104.H4 %>%
mutate(strain = "O104.H4", resistance = "F")
EColi_O157.H7 <- EColi_O157.H7 %>%
mutate(strain = "O157.H7", resistance = "F")
EColi_UMN026 <- EColi_UMN026 %>%
mutate(strain = "UMN026", resistance = "F")
EColi_O83.H1 <- EColi_O83.H1 %>%
mutate(strain = "O83.H1", resistance = "F")
ShigellaDysenteriae <- ShigellaDysenteriae %>%
mutate(strain = "Dysenteriae", resistance = "F")
ShigellaDysenteriae$specie <- "Shigella"
ShigellaFlexneri <- ShigellaFlexneri %>%
mutate(strain = "Flexneri", resistance = "F")
ShigellaFlexneri$specie <- "Shigella"
test <- finalResistantGenes
test$strain <- if_else(grepl("Escherichia coli", x = test$specie), gsub("Escherichia coli", "", test$specie),
test$specie)
test$strain <- if_else(grepl("Shigella", x = test$specie), gsub("Shigella", "", test$specie),
test$strain)
test$strain <- if_else(grepl("K-12", x = test$strain), "K12",
if_else(grepl("flexneri", x = test$strain), "Flexneri",
if_else(grepl("O157:H7", x = test$strain), "O157.H7",
gsub(pattern = "^ ", replacement = "", x = test$strain))))
test$specie <- if_else(grepl("Escherichia coli", x = test$specie), "Escherichia coli",
if_else(grepl("Shigella", x = test$specie), "Shigella", test$specie))
finalResistantGenes <- test %>% mutate(resistance = "T")
all.genes <- rbind(Ecoli_IAI39, Ecoli_K12,EColi_O104.H4,EColi_O157.H7,
EColi_UMN026, EColi_O83.H1, ShigellaDysenteriae,ShigellaFlexneri, finalResistantGenes)
not_wanted_columns <- c("ID", "DESC", "DB_name", "plasmid_notPlasmid", "host","country", "isolation_source","start_position", "end_position", "strain", "strand", "specie")
resistent <- all.genes %>%
filter(resistance == "T")
non_resistent <- all.genes %>%
filter(resistance == "F")
train_resistent <- sample_n(filter(resistent, !is.na(resistance)), 350, replace = T)
train_non_resistent <- sample_n(filter(non_resistent, !is.na(resistance)), 500, replace = T)
train_resistent_non_resistent <- rbind(train_non_resistent, train_resistent)
train <- sample_n(filter(train_resistent_non_resistent, !is.na(resistance)), nrow(train_resistent_non_resistent)*0.8) #change this to 0.1 to make experiments faster
test <- suppressMessages(
anti_join(filter(train_resistent_non_resistent, !is.na(resistance)), train)
)
#### Remove all columns which are not numerical! Alg not converge if dont
train <- train[ , -which(names(train) %in% not_wanted_columns)]  #remove column by name
test <- test[ , -which(names(test) %in% not_wanted_columns)]  #remove column by name
#remove all columns that have NAs because they cause error in building x, there should not be any...
train <- train[,colSums(is.na(train))<nrow(train)]
train <- na.omit(train)
ctrl <- trainControl(method="repeatedcv",repeats = 3)
knnFit <- train(resistance ~ ., data = train, method = "knn", trControl = ctrl, preProcess = c("center","scale"), tuneLength = 20)
knn.cv(train, cl = train$resistance, k = 5, l = 0, prob = FALSE, use.all = TRUE)
plot(knnFit)
knnPredict <- predict(knnFit, newdata =test)
#Get the confusion matrix to see accuracy value and other parameter values
confusionMatrix(knnPredict, testing$Direction )
#Get the confusion matrix to see accuracy value and other parameter values
confusionMatrix(knnPredict, test$resistance )
not_wanted_columns <- c("ID", "DESC", "DB_name", "plasmid_notPlasmid", "host","country", "isolation_source", "strain", "strand", "specie")
resistent <- all.genes %>%
filter(resistance == "T")
non_resistent <- all.genes %>%
filter(resistance == "F")
train_resistent <- sample_n(filter(resistent, !is.na(resistance)), 350, replace = T)
train_non_resistent <- sample_n(filter(non_resistent, !is.na(resistance)), 500, replace = T)
train_resistent_non_resistent <- rbind(train_non_resistent, train_resistent)
train <- sample_n(filter(train_resistent_non_resistent, !is.na(resistance)), nrow(train_resistent_non_resistent)*0.8) #change this to 0.1 to make experiments faster
test <- suppressMessages(
anti_join(filter(train_resistent_non_resistent, !is.na(resistance)), train)
)
#### Remove all columns which are not numerical! Alg not converge if dont
train <- train[ , -which(names(train) %in% not_wanted_columns)]  #remove column by name
test <- test[ , -which(names(test) %in% not_wanted_columns)]  #remove column by name
#remove all columns that have NAs because they cause error in building x, there should not be any...
train$start_position <- as.integer(train$start_position)
train$end_position <- as.integer(train$end_position)
test$start_position <- as.integer(test$start_position)
test$end_position <- as.integer(test$end_position)
train <- train[,colSums(is.na(train))<nrow(train)]
train <- na.omit(train)
ctrl <- trainControl(method="repeatedcv",repeats = 3)
knnFit <- train(resistance ~ ., data = train, method = "knn", trControl = ctrl, preProcess = c("center","scale"), tuneLength = 20)
plot(knnFit)
knnPredict <- predict(knnFit, newdata =test)
#Get the confusion matrix to see accuracy value and other parameter values
confusionMatrix(knnPredict, test$resistance )
not_wanted_columns <- c("ID", "DESC", "DB_name", "plasmid_notPlasmid", "host","country", "isolation_source", "strain", "strand", "specie","start_position", "end_position")
results <- data.frame(falseNegatives=integer(),falsePositives=integer(),total=integer(), percantage = double(), results_from=character(),Sensitivty=double(), Precision=double(), BalancedAccuracy=double(), AccuracyPVal=double, McnemarPValue=double())
resistent <- all.genes %>%
filter(resistance == "T")
non_resistent <- all.genes %>%
filter(resistance == "F")
iterations = 50
for (i in 1:iterations) {
train_resistent <- sample_n(filter(resistent, !is.na(resistance)), 350, replace = T)
train_non_resistent <- sample_n(filter(non_resistent, !is.na(resistance)), 1000, replace = T)
train_resistent_non_resistent <- rbind(train_non_resistent, train_resistent)
train <- sample_n(filter(train_resistent_non_resistent, !is.na(resistance)), nrow(train_resistent_non_resistent)*0.8) #change this to 0.1 to make experiments faster
test <- suppressMessages(
anti_join(filter(train_resistent_non_resistent, !is.na(resistance)), train)
)
#### Remove all columns which are not numerical! Alg not converge if dont
train <- train[ , -which(names(train) %in% not_wanted_columns)]  #remove column by name
test <- test[ , -which(names(test) %in% not_wanted_columns)]  #remove column by name
#remove all columns that have NAs because they cause error in building x, there should not be any...
train <- train[,colSums(is.na(train))<nrow(train)]
train <- na.omit(train)
ctrl <- trainControl(method="repeatedcv", repeats = 10)
knnFit <- train(resistance ~ . , data = train, method = "knn", trControl = ctrl, preProcess = c("center","scale"), tuneLength = 20)
plot(knnFit)
knnPredict <- predict(knnFit, newdata = test)
confusion_matrix <- table(knnPredict, test$resistance)
false_negatives <- confusion_matrix[1,2]
false_positives <- confusion_matrix[2,1]
total_number_of_wrong <- false_negatives + false_positives
cm <- confusionMatrix(confusion_matrix)
t = data.frame(false_negatives,false_positives,total_number_of_wrong, total_number_of_wrong/nrow(test), "test",cm$byClass['Sensitivity'], cm$byClass['Precision'], cm$byClass['Balanced Accuracy'],cm$overall['AccuracyPValue'], cm$overall['McnemarPValue'])
names(t)=c("falseNegatives","falsePositives","total","percentage","results_from", "Sensitivty", "Precision", "BalancedAccuracy", "AccuracyPVal", "McnemarPValue")
results = rbind(results, t)
}
summary(results)
not_wanted_columns <- c("ID", "DESC", "DB_name", "plasmid_notPlasmid", "host","country", "isolation_source", "strain", "strand", "specie","start_position", "end_position")
results <- data.frame(falseNegatives=integer(),falsePositives=integer(),total=integer(), percantage = double(), results_from=character(),Sensitivty=double(), Precision=double(), BalancedAccuracy=double(), AccuracyPVal=double, McnemarPValue=double())
resistent <- all.genes %>%
filter(resistance == "T")
non_resistent <- all.genes %>%
filter(resistance == "F")
iterations = 20
for (i in 1:iterations) {
train_resistent <- sample_n(filter(resistent, !is.na(resistance)), 350, replace = T)
train_non_resistent <- sample_n(filter(non_resistent, !is.na(resistance)), 1000, replace = T)
train_resistent_non_resistent <- rbind(train_non_resistent, train_resistent)
train <- sample_n(filter(train_resistent_non_resistent, !is.na(resistance)), nrow(train_resistent_non_resistent)*0.8) #change this to 0.1 to make experiments faster
test <- suppressMessages(
anti_join(filter(train_resistent_non_resistent, !is.na(resistance)), train)
)
#### Remove all columns which are not numerical! Alg not converge if dont
train <- train[ , -which(names(train) %in% not_wanted_columns)]  #remove column by name
test <- test[ , -which(names(test) %in% not_wanted_columns)]  #remove column by name
#remove all columns that have NAs because they cause error in building x, there should not be any...
train <- train[,colSums(is.na(train))<nrow(train)]
train <- na.omit(train)
ctrl <- trainControl(method="repeatedcv", repeats = 5)
knnFit <- train(resistance ~ . , data = train, method = "knn", trControl = ctrl, preProcess = c("center","scale"), tuneLength = 15)
plot(knnFit)
knnPredict <- predict(knnFit, newdata = test)
confusion_matrix <- table(knnPredict, test$resistance)
false_negatives <- confusion_matrix[1,2]
false_positives <- confusion_matrix[2,1]
total_number_of_wrong <- false_negatives + false_positives
cm <- confusionMatrix(confusion_matrix)
t = data.frame(false_negatives,false_positives,total_number_of_wrong, total_number_of_wrong/nrow(test), "test",cm$byClass['Sensitivity'], cm$byClass['Precision'], cm$byClass['Balanced Accuracy'],cm$overall['AccuracyPValue'], cm$overall['McnemarPValue'])
names(t)=c("falseNegatives","falsePositives","total","percentage","results_from", "Sensitivty", "Precision", "BalancedAccuracy", "AccuracyPVal", "McnemarPValue")
results = rbind(results, t)
}
summary(results)
plot(results$AccuracyPVal)
hist(results$AccuracyPVal)
hist(results$McnemarPValue)
hist(results$percentage)
hist(results$AccuracyPVal)
knitr::opts_chunk$set(echo = TRUE)
# install.packages("reticulate")  # needed for python run in Rmd
library(tidyverse)
library(caret)
library(MASS)
library(purrr)
library(tidyr)
library(earth)
library(ggplot2)
library(glmnet)
library(class) #knn
#source("https://bioconductor.org/biocLite.R")
#biocLite("qvalue")
library(qvalue)
# Save csv file name as data frame name
temp <- list.files(path = "Data-Csv", pattern="*.csv")
df_names <- gsub("standardized", "", gsub("*.csv$", "", temp)) # remove "standardized" and .csv extension"
df_names <- make.names(df_names)    # replace problematic characters
# Load each csv file, set the proper name for it and store each in a variable (data.frame)
temp <- list.files(path = "Data-Csv", pattern="*.csv", full.names = T)
list2env(lapply(setNames(temp, df_names), read_csv), envir = .GlobalEnv)
Ecoli_IAI39 <- Ecoli_IAI39 %>%
mutate(strain = "IAI39", resistance = "F")
Ecoli_K12 <- Ecoli_K12 %>%
mutate(strain = "K12", resistance = "F")
EColi_O104.H4 <- EColi_O104.H4 %>%
mutate(strain = "O104.H4", resistance = "F")
EColi_O157.H7 <- EColi_O157.H7 %>%
mutate(strain = "O157.H7", resistance = "F")
EColi_UMN026 <- EColi_UMN026 %>%
mutate(strain = "UMN026", resistance = "F")
EColi_O83.H1 <- EColi_O83.H1 %>%
mutate(strain = "O83.H1", resistance = "F")
ShigellaDysenteriae <- ShigellaDysenteriae %>%
mutate(strain = "Dysenteriae", resistance = "F")
ShigellaDysenteriae$specie <- "Shigella"
ShigellaFlexneri <- ShigellaFlexneri %>%
mutate(strain = "Flexneri", resistance = "F")
ShigellaFlexneri$specie <- "Shigella"
test <- finalResistantGenes
test$strain <- if_else(grepl("Escherichia coli", x = test$specie), gsub("Escherichia coli", "", test$specie),
test$specie)
test$strain <- if_else(grepl("Shigella", x = test$specie), gsub("Shigella", "", test$specie),
test$strain)
test$strain <- if_else(grepl("K-12", x = test$strain), "K12",
if_else(grepl("flexneri", x = test$strain), "Flexneri",
if_else(grepl("O157:H7", x = test$strain), "O157.H7",
gsub(pattern = "^ ", replacement = "", x = test$strain))))
test$specie <- if_else(grepl("Escherichia coli", x = test$specie), "Escherichia coli",
if_else(grepl("Shigella", x = test$specie), "Shigella", test$specie))
finalResistantGenes <- test %>% mutate(resistance = "T")
all.genes <- rbind(Ecoli_IAI39, Ecoli_K12,EColi_O104.H4,EColi_O157.H7,
EColi_UMN026, EColi_O83.H1, ShigellaDysenteriae,ShigellaFlexneri, finalResistantGenes)
# Using all data without differing between resisentece T/F
ggplot(all.genes,aes(y = gc_content, x = specie, fill = specie)) +
geom_boxplot() + labs(title = "GC content by specie")
GC_polt_data <- all.genes %>%
filter(specie == "Escherichia" | specie == "Shigella")
# Using all data without differing between resisentece T/F
ggplot(GC_polt_data, aes(y = gc_content, x = specie, fill = specie)) +
geom_boxplot() + labs(title = "GC content by specie")
GC_polt_data <- all.genes %>%
filter(specie == "Escherichia" & specie == "Shigella")
# Using all data without differing between resisentece T/F
ggplot(GC_polt_data, aes(y = gc_content, x = specie, fill = specie)) +
geom_boxplot() + labs(title = "GC content by specie")
all.genes$specie
unique(all.genes$specie)
GC_polt_data <- all.genes %>%
filter(specie == "Escherichia coli" & specie == "Shigella")
# Using all data without differing between resisentece T/F
ggplot(GC_polt_data, aes(y = gc_content, x = specie, fill = specie)) +
geom_boxplot() + labs(title = "GC content by specie")
GC_polt_data <- all.genes %>%
filter(specie == "Escherichia coli" && specie == "Shigella")
# Using all data without differing between resisentece T/F
ggplot(GC_polt_data, aes(y = gc_content, x = specie, fill = specie)) +
geom_boxplot() + labs(title = "GC content by specie")
GC_polt_data <- all.genes %>%
filter(specie == "Escherichia coli" & specie == "Shigella")
# Using all data without differing between resisentece T/F
ggplot(GC_polt_data, aes(y = gc_content, x = specie, fill = specie)) +
geom_boxplot() + labs(title = "GC content by specie")
GC_polt_data <- all.genes %>%
filter(specie == "Escherichia coli" || specie == "Shigella")
# Using all data without differing between resisentece T/F
ggplot(GC_polt_data, aes(y = gc_content, x = specie, fill = specie)) +
geom_boxplot() + labs(title = "GC content by specie")
GC_polt_data <- all.genes %>%
filter(specie == "Escherichia coli" || specie == "Shigella")
# Using all data without differing between resisentece T/F
ggplot(GC_polt_data, aes(y = gc_content, x = specie, fill = specie)) +
geom_boxplot() + labs(title = "GC content by specie")
GC_polt_data <- all.genes %>%
filter(specie == "Escherichia coli" | specie == "Shigella")
# Using all data without differing between resisentece T/F
ggplot(GC_polt_data, aes(y = gc_content, x = specie, fill = specie)) +
geom_boxplot() + labs(title = "GC content by specie")
ggplot(GC_polt_data,aes(y = gc_content, x = strain, fill = strain)) +
geom_boxplot() + labs(title = "GC content by strain")
ggplot(GC_polt_data,aes(y = AT_GC_ratio, x = strain, fill = strain)) +
geom_boxplot() + labs(title = "AT/GC ratio by strain")
unique(all.genes$specie)
GC_polt_data <- all.genes %>%
filter(specie == "Escherichia coli" | specie == "Shigella")
ggplot(GC_polt_data,aes(y = AT_GC_ratio, x = strain, fill = strain)) +
geom_boxplot() + labs(title = "AT/GC ratio by strain")
ggplot(GC_polt_data, aes(y = AT_GC_ratio, x = specie, fill = specie)) +
geom_boxplot() +
labs(title = "AT/GC ratio by strain")
ggplot(GC_polt_data, aes(y = AT_GC_ratio, x = specie, fill = specie)) +
geom_boxplot() +
labs(title = "AT/GC ratio by strain") + ylim(0,4)
ggplot(GC_polt_data, aes(y = AT_GC_ratio, x = specie, fill = specie)) +
geom_boxplot() +
labs(title = "AT/GC ratio by strain") + ylim(0,3)
ggplot(GC_polt_data, aes(y = starts_position, x = specie, fill = specie)) +
geom_boxplot() +
labs(title = "AT/GC ratio by strain") + ylim(0,3)
ggplot(GC_polt_data, aes(y = start_position, x = specie, fill = specie)) +
geom_boxplot() +
labs(title = "AT/GC ratio by strain") + ylim(0,3)
ggplot(GC_polt_data, aes(y = start_position, x = specie, fill = specie)) +
geom_boxplot() +
labs(title = "AT/GC ratio by strain")
ggplot(GC_polt_data, aes(y = end_position, x = specie, fill = specie)) +
geom_boxplot() +
labs(title = "AT/GC ratio by strain")
ggplot(GC_polt_data) +
geom_boxplot( aes(y = end_position, x = specie, fill = specie)) +
geom_boxplot( aes(y = start_position, x = specie, fill = specie)) +
labs(title = "AT/GC ratio by strain")
ggplot(GC_polt_data) +
geom_boxplot( aes(y = end_position, x = specie, fill = "red")) +
geom_boxplot( aes(y = start_position, x = specie, fill = "blue")) +
labs(title = "AT/GC ratio by strain")
GC_plot_data <- all.genes %>%
filter(specie == "Escherichia coli" | specie == "Shigella")
# Using all data without differing between resisentece T/F
ggplot(GC_plot_data, aes(y = gc_content, x = specie, fill = specie)) +
geom_boxplot() + labs(title = "GC content by specie")
ggplot(GC_plot_data,aes(y = gc_content, x = strain, fill = strain)) +
geom_boxplot() + labs(title = "GC content by strain")
ggplot(GC_plot_data,aes(y = gc_content, x = strain, fill = strain)) +
geom_boxplot() + labs(title = "GC content by strain")
ggplot(GC_plot_data) +
geom_boxplot( aes(y = end_position, x = specie, fill = specie)) +
geom_boxplot( aes(y = start_position, x = specie, fill = specie)) +
labs(title = "AT/GC ratio by strain")
knitr::opts_chunk$set(echo = TRUE)
library(ggpubr)
library(tidyverse)
radix = read.csv("time_radix.csv", header = T)
ggplot(data = radix) +
geom_point(mapping = aes(y = time/n, x = n)) + theme_bw()
ggplot(data = radix) +
geom_point(mapping = aes(y = time, x = n)) + theme_bw()
ggplot(data = radix) +
geom_point(mapping = aes(y = time/n, x = n)) + theme_bw()
ggplot(data = radix) +
geom_point(mapping = aes(y = time/n, x = n))
radix = read.csv("time_radix.csv", header = T)
ggplot(data = radix) +
geom_point(mapping = aes(y = time/n, x = n))
ggplot(data = radix) +
geom_point(mapping = aes(y = time, x = n))
ggplot(data = radix) +
geom_point(mapping = aes(y = time/n^2, x = n))
ggplot(data = radix) +
geom_point(mapping = aes(y = time/n*log(n), x = n))
ggplot(data = radix) +
geom_point(mapping = aes(y = time/n+n, x = n))
ggplot(data = radix) +
geom_point(mapping = aes(y = time/(n+n), x = n))
ggplot(data = radix) +
geom_point(mapping = aes(y = time/n, x = n))
radix = read.csv("time_radix.csv", header = T)
ggplot(data = radix) +
geom_point(mapping = aes(y = time/n, x = n))
ggplot(data = radix) +
geom_point(mapping = aes(y = time/n, x = n))
ggplot(data = radix) +
geom_point(mapping = aes(y = time/n^2, x = n))
ggplot(data = radix) +
geom_point(mapping = aes(y = time/n, x = n))
radix = read.csv("time_radix.csv", header = T)
ggplot(data = radix) +
geom_point(mapping = aes(y = time/n, x = n))
ggplot(data = radix) +
geom_point(mapping = aes(y = time/n, x = n)) + ylim(0,2.5e-07)
ggplot(data = radix) +
geom_point(mapping = aes(y = time/n, x = n)) + ylim(0,2.5e-06)
ggplot(data = radix) +
geom_point(mapping = aes(y = time/n, x = n)) + ylim(0,2.5e-07)
knitr::opts_chunk$set(echo = TRUE)
library(ggpubr)
library(tidyverse)
sorted = read.csv("time_sorted.csv", header = T)
ggplot(data = sorted) +
geom_point(mapping = aes(y = time/n, x = n)) + ylim(0,2.5e-07)
ggplot(data = sorted) +
geom_point(mapping = aes(y = time, x = n)) + ylim(0,2.5e-07)
ggplot(data = sorted) +
geom_point(mapping = aes(y = time, x = n))
ggplot(data = sorted) +
geom_point(mapping = aes(y = time/log(n), x = n))
ggplot(data = sorted) +
geom_point(mapping = aes(y = time/n*log(n), x = n))
both_sorts <- rbind(radix, sorted)
setwd("~/Desktop/AarhusUniversity/GenomeScaleAlg/Projects/Genome_scale_algorithms/Project4")
radix = read.csv("time_radix.csv", header = T)
both_sorts <- rbind(radix, sorted)
ggplot(data = radix) +
geom_point(mapping = aes(y = time/n, x = n)) + ylim(0,2.5e-07)
ggplot(data = sorted) +
geom_point(mapping = aes(y = time/n*log(n), x = n))
View(sorted)
ggplot(data = both_sorts) +
geom_point(mapping = aes(y = time, x = n, color = Algorithm))
ggplot(data = both_sorts) +
geom_point(mapping = aes(y = time, x = n, color = Algorithm)) +
xlim(0,10000)
ggplot(data = both_sorts) +
geom_point(mapping = aes(y = time, x = n, color = Algorithm)) +
xlim(0,10000) + ylim(0, 0.001)
