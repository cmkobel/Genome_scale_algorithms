b <- ggplot(data = fig[[2]]) + theme_bw() +
geom_point(mapping = aes(y = Time/n, x = n, color = Type))  + scale_y_log10()
c <- ggplot(data = fig[[2]]) +
geom_point(mapping = aes(y = Time*10^4, x = n, color = Type)) + geom_smooth(method = "lm", mapping = aes(y = Time*10^4, x = n)) + theme_bw()
d <- ggplot(data = fig[[1]]) +
geom_point(mapping = aes(y = Time/m, x = m, color = Type)) + theme_bw() +  scale_y_log10()
e <- ggplot(data = fig[[2]]) + theme_bw() +
geom_point(mapping = aes(y = Time/n, x = n, color = Type))  + scale_y_log10()
f <- ggplot(data = fig[[2]]) +
geom_point(mapping = aes(y = Time*10^4, x = n, color = Type)) + geom_smooth(method = "lm",mapping = aes(y = Time*10^4, x = n)) + theme_bw()
ggarrange(a, b, c, d, e, f,
labels = c('A', 'B', 'C', 'D', 'E', 'F'),
ncol = 2, nrow = 3)
ggarrange(a, b, c, d, e, f,
labels = c('A', 'B', 'C', 'D', 'E', 'F'),
ncol = 3, nrow = 2)
df_Naive = read.csv("Test ExactSubstring_Naive.csv", header = FALSE)
df_KMP = read.csv("Test ExactSubstring_KMP.csv", header = FALSE)
colnames(df_Naive) = c("Function", "Time", "n", "m", "z", "RunName")
colnames(df_KMP) = c("Function", "Time", "n", "m", "z", "RunName")
dat_kmp = df_KMP
dat_naive = df_Naive
ploting <- function(dat_naive, dat_kmp){
dat_naive <- dat_naive %>%
mutate(type = "Naive")
dat_kmp <- dat_kmp %>%
mutate(type = "KMP")
all <- rbind(dat_kmp, dat_naive)
colnames(all) = c("Function", "Time", "n", "m", "z", "RunName", "Type")
constant_n <- all %>%
filter(n == 10000)
constant_m <- all %>%
filter(m == 10)
return(list(constant_n, constant_m))
}
fig <- ploting(df_Naive, df_KMP)
constant_n_1 <- ggplot(data = fig[[1]]) +
geom_point(mapping = aes(y = Time/m, x = m, color = Type)) + theme_bw() +  scale_y_log10()
constant_m_n_linear <- ggplot(data = fig[[2]]) + theme_bw() +
geom_point(mapping = aes(y = Time/n, x = n, color = Type))+  scale_y_log10()
constant_m_non_linear <- ggplot(data = fig[[2]]) + theme_bw() +
geom_point(mapping = aes(y = Time/n^2, x = n, color = Type))+  scale_y_log10()
constant_m_linear <- ggplot(data = fig[[2]]) +
geom_point(mapping = aes(y = Time*10^4, x = n, color = Type)) +
geom_smooth(method = "lm", mapping = aes(y = Time*10^4, x = n, color = Type)) + theme_bw()
ggarrange(constant_n_1, constant_m_n_linear,constant_m_non_linear,constant_m_linear,
labels = c('Constant n - Time/m', 'Constant m: Time/n','Constant m: Time/n^2', 'Constant n:'),
ncol = 2, nrow = 2)
setwd('/Users/PM/Dropbox/PG2018/exercises/PCA_admixture')
info = read.csv("Sample_meta_data.csv", header = T, sep = ';')
info = read.csv("Sample_meta_data.csv", header = T, sep = ';')
vcf.fn <- "Allvariants_135_145_chr2.vcf"
snpgdsVCF2GDS(vcf.fn, "Allvariants_135_145_chr2.gds", method="biallelic.only")
genofile <- snpgdsOpen("Allvariants_135_145_chr2.gds",  FALSE, TRUE, TRUE)
pca <- snpgdsPCA(genofile)
summary(pca)
eigenvectors = as.data.frame(pca$eigenvect)
colnames(eigenvectors) = as.vector(sprintf("PC%s", seq(1:nrow(pca$eigenvect))))
pca$sample.id = sub("_chr2_piece_dedup", "", pca$sample.id)
eigenvectors$region = info[match(pca$sample.id, info$ENA.RUN),]$region
eigenvectors$population = info[match(pca$sample.id, info$ENA.RUN),]$population
pca_percent <- pca$varprop*100
qplot(y = pca_percent, x = seq(1, length(pca$eigenval))) + geom_line() + geom_point() + theme_bw() + xlab("PC's") + ylab("Variance explained (%)")
dev.off()
ggplot(data = eigenvectors, aes(x = PC1, y = PC2, col = region)) +
geom_point(size=3,alpha=0.5) +
scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D")) +
theme_bw()
dev.off()
dev.off()
ggplot(data = eigenvectors, aes(x = PC1, y = PC2, col = region)) +
geom_point(size=3,alpha=0.5) +
scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D")) +
theme_bw()
set.seed(1000)
snpset <- snpgdsLDpruning(genofile, ld.threshold=0.3)
snpset.id <- unlist(snpset)
pca_pruned <- snpgdsPCA(genofile, snp.id=snpset.id, num.thread=2)
eigenvectors = as.data.frame(pca_pruned$eigenvect)
colnames(eigenvectors) = as.vector(sprintf("PC%s", seq(1:nrow(pca$eigenvect))))
pca_pruned$sample.id = sub("_chr2_piece_dedup", "", pca$sample.id)
eigenvectors = as.data.frame(pca_pruned$eigenvect)
pca_pruned$sample.id
genofile <- snpgdsOpen("Allvariants_135_145_chr2.gds",  FALSE, TRUE, TRUE)
pca <- snpgdsPCA(genofile)
summary(pca)
eigenvectors = as.data.frame(pca$eigenvect)
colnames(eigenvectors) = as.vector(sprintf("PC%s", seq(1:nrow(pca$eigenvect))))
pca$sample.id
pca$sample.id = sub("_chr2_piece_dedup", "", pca$sample.id)
eigenvectors$region = info[match(pca$sample.id, info$ENA.RUN),]$region
eigenvectors$population = info[match(pca$sample.id, info$ENA.RUN),]$population
pca_percent <- pca$varprop*100
qplot(y = pca_percent, x = seq(1, length(pca$eigenval))) + geom_line() + geom_point() + theme_bw() + xlab("PC's") + ylab("Variance explained (%)")
ggplot(data = eigenvectors, aes(x = PC1, y = PC2, col = region)) +
geom_point(size=3,alpha=0.5) +
scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D")) +
theme_bw()
snpset <- snpgdsLDpruning(genofile, ld.threshold=0.3)
snpset.id <- unlist(snpset)
snpset.id
snpset
pca_pruned <- snpgdsPCA(genofile, snp.id=snpset.id, num.thread=2)
eigenvectors = as.data.frame(pca_pruned$eigenvect)
colnames(eigenvectors) = as.vector(sprintf("PC%s", seq(1:nrow(pca$eigenvect))))
pca_pruned$sample.id = sub("_chr2_piece_dedup", "", pca$sample.id)
eigenvectors$region = info[match(pca_pruned$sample.id, info$ENA.RUN),]$region
eigenvectors$population = info[match(pca_pruned$sample.id, info$ENA.RUN),]$population
ggplot(data = eigenvectors, aes(x = PC1, y = PC2, col = region)) +
geom_point(size=3,alpha=0.5) +
scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D")) +
theme_bw() + coord_flip()
snpgdsGDS2BED(genofile, "Allvariants_135_145_chr2_pruned.gds", sample.id=NULL, snp.id=snpset.id, snpfirstdim=NULL, verbose=TRUE)
?ggsave()
tbl = read.table("Allvariants_135_145_chr2_pruned.gds.3.Q")
tbl = read.table("/Users/PM/Downloads/test2.3.Q")
ord = tbl[order(tbl$V1,tbl$V2,tbl$V3),]
bp = barplot(t(as.matrix(ord)),
space = c(0.2),
col=rainbow(4),
xlab="Individual #",
ylab="Ancestry",
border=NA)
CV = read.table('CV_logs.txt')
p <- ggplot(data = CV, aes(x = V3, y = V4, group = 1)) + geom_line() + geom_point() + theme_bw() + labs(x = 'Number of clusters', y = 'Cross validation error')
ggsave(p, device = "pdf")
tbl = read.table("Allvariants_135_145_chr2_pruned.gds.3.Q")
getwd()
tbl = read.table("Allvariants_135_145_chr2_pruned.gds.3.Q")
tbl = read.table("Allvariants_135_145_chr2_pruned.gds.3.Q")
ord = tbl[order(tbl$V1,tbl$V2,tbl$V3),]
bp = barplot(t(as.matrix(ord)),
space = c(0.2),
col=rainbow(3),
xlab="Individual #",
ylab="Ancestry",
border=NA)
ggplot(data = eigenvectors, aes(x = PC1, y = PC2, col = region)) +
geom_point(size=3,alpha=0.5) +
scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D")) +
theme_bw()
ggplot(data = eigenvectors, aes(x = PC1, y = PC2, col = region)) +
geom_point(size=3,alpha=0.5) +
scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D")) +
theme_bw()
snpgdsVCF2GDS(vcf.fn, "Allvariants_135_145_chr2.gds", method="biallelic.only")
genofile <- snpgdsOpen("Allvariants_135_145_chr2.gds",  FALSE, TRUE, TRUE)
pca <- snpgdsPCA(genofile)
library(SNPRelate)
library(ggplot2)
setwd("/Users/PM/Dropbox/PG2018/exercises/PCA_admixture")
info = read.csv("Sample_meta_data.csv", header = T, sep = ';')
vcf.fn <- "Allvariants_135_145_chr2.vcf"
snpgdsVCF2GDS(vcf.fn, "Allvariants_135_145_chr2.gds", method="biallelic.only")
info = read.csv("Sample_meta_data.csv", header = T, sep = ';')
setwd("/Users/PM/Dropbox/PG2018/exercises/PCA_admixture")
info = read.csv("Sample_meta_data.csv", header = T, sep = ';')
vcf.fn <- "Allvariants_135_145_chr2.vcf"
snpgdsVCF2GDS(vcf.fn, "Allvariants_135_145_chr2.gds", method="biallelic.only")
snpgdsVCF2GDS(vcf.fn, "Allvariants_135_145_chr2_2.gds", method="biallelic.only")
genofile <- snpgdsOpen("Allvariants_135_145_chr2.gds",  FALSE, TRUE, TRUE)
pca <- snpgdsPCA(genofile)
summary(pca)
library(SNPRelate)
pca <- snpgdsPCA(genofile)
summary(pca)
genofile <- snpgdsOpen("Allvariants_135_145_chr2.gds",  FALSE, TRUE, TRUE)
genofile <- snpgdsOpen("Allvariants_135_145_chr2_2.gds",  FALSE, TRUE, TRUE)
pca <- snpgdsPCA(genofile)
summary(pca)
eigenvectors = as.data.frame(pca$eigenvect)
colnames(eigenvectors) = as.vector(sprintf("PC%s", seq(1:nrow(pca$eigenvect))))
pca$sample.id = sub("_chr2_piece_dedup", "", pca$sample.id)
eigenvectors$region = info[match(pca$sample.id, info$ENA.RUN),]$region
eigenvectors$population = info[match(pca$sample.id, info$ENA.RUN),]$population
pca_percent <- pca$varprop*100
qplot(y = pca_percent, x = seq(1, length(pca$eigenval))) + geom_line() + geom_point() + theme_bw() + xlab("PC's") + ylab("Variance explained (%)")
ggplot(data = eigenvectors, aes(x = PC1, y = PC2, col = region)) +
geom_point(size=3,alpha=0.5) +
scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D")) +
theme_bw()
set.seed(1000)
snpset <- snpgdsLDpruning(genofile, ld.threshold=0.3)
snpset.id <- unlist(snpset)
pca_pruned <- snpgdsPCA(genofile, snp.id=snpset.id, num.thread=2)
eigenvectors = as.data.frame(pca_pruned$eigenvect)
colnames(eigenvectors) = as.vector(sprintf("PC%s", seq(1:nrow(pca$eigenvect))))
pca_pruned$sample.id = sub("_chr2_piece_dedup", "", pca$sample.id)
eigenvectors$region = info[match(pca_pruned$sample.id, info$ENA.RUN),]$region
eigenvectors$population = info[match(pca_pruned$sample.id, info$ENA.RUN),]$population
ggplot(data = eigenvectors, aes(x = PC1, y = PC2, col = region)) +
geom_point(size=3,alpha=0.5) +
scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D")) +
theme_bw() + coord_flip()
snpgdsGDS2BED(genofile, "Allvariants_135_145_chr2_pruned.gds", sample.id=NULL, snp.id=snpset.id, snpfirstdim=NULL, verbose=TRUE)
CV = read.table('CV_logs.txt')
p <- ggplot(data = CV, aes(x = V3, y = V4, group = 1)) + geom_line() + geom_point() + theme_bw() + labs(x = 'Number of clusters', y = 'Cross validation error')
p
tbl = read.table("Allvariants_135_145_chr2_pruned.gds.3.Q")
ord = tbl[order(tbl$V1,tbl$V2,tbl$V3),]
tbl = read.table("Allvariants_135_145_chr2_pruned.gds.3.Q")
ord = tbl[order(tbl$V1,tbl$V2,tbl$V3),]
bp = barplot(t(as.matrix(ord)),
space = c(0.2),
col=rainbow(3),
xlab="Individual #",
ylab="Ancestry",
border=NA)
cor(eigenvectors$PC1, eigenvectors$PC2)
cor(eigenvectors$PC4, eigenvectors$PC3)
library(circlize)
getwd()
setwd('/Users/PM/Downloads/3206-3')
strains = read.csv(file = './strains.csv', dec=",", sep=";")
contigs = read.csv(file = paste(filename_prefix,'_contigs.csv',sep=""), dec=",", sep=";")
contigs = read.csv(file = paste(filename_prefix,'3206-3_contigs.csv',sep=""), dec=",", sep=";")
locations = read.csv(file = paste(filename_prefix,'3206-3_placements.csv',sep=""), dec=",", sep=";")
contigs = read.csv(file = paste('3206-3_contigs.csv',sep=""), dec=",", sep=";")
locations = read.csv(file = paste('3206-3_placements.csv',sep=""), dec=",", sep=";")
links = read.csv(file = paste(f'3206-3_links.csv',sep=""), dec=",", sep=";")
links = read.csv(file = paste('3206-3_links.csv',sep=""), dec=",", sep=";")
colours = read.csv(file = paste('3206-3_colours.csv',sep=""), dec=",", sep=";")
View(contigs)
circos.clear()
circos.par(cell.padding = c(0.02, 0, 0.02, 0))
circos.initialize(factors = contigs$ID, x = as.numeric(contigs$Bound))
circos.trackPlotRegion(factors = locations$ID, ylim=c(0, 1) , panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$cell.ylim[2],
CELL_META$sector.index, facing = "clockwise", niceFacing = FALSE
, adj = c(0, 0.5)
)
})
for(j in 1:nrow(colours)){
circos.updatePlotRegion(sector.index = as.character(colours$ID[j]), bg.col = as.character(colours$Value[j]))
#circos.updatePlotRegion(sector.index = as.character(colours$ID[j]), bg.col = "wheat")
}
circos.trackLines(locations$ID, as.numeric(locations$Location), as.double(as.character(locations$Synteny)), col = "black", type = "h")
circos.trackPlotRegion(factors = locations$ID, ylim=c(0, 1) )
for(j in 1:nrow(colours)){
#circos.updatePlotRegion(sector.index = as.character(colours$ID[j]), bg.col = as.character(colours$Value[j]))
circos.updatePlotRegion(sector.index = as.character(colours$ID[j]), bg.col = "wheat")
}
nrow(colours)
colours = read.csv(file = paste('3206-3_colours.csv',sep=""), dec=",", sep=";")
?snpgdsLDpruning()
View(links)
circos.trackPlotRegion(factors = locations$ID, ylim=c(0, 1) , panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$cell.ylim[2],
CELL_META$sector.index, facing = "clockwise", niceFacing = FALSE
, adj = c(0, 0.5)
)
})
for(j in 1:nrow(links)){
#circos.link(links$ID1[j], links$Location1[j], links$ID2[j], links$Location2[j], col = colors()[(j%%135)+13])
circos.link(links$ID1[j], links$Location1[j], links$ID2[j], links$Location2[j], col = rand_color(1))
}
View(locations)
df_Naive = read.csv("Test ExactSubstring_Naive.csv", header = FALSE)
setwd(/Users/PM/Dropbox/Genome_scale_algorithms/Genome_scale_algorithms/Project1)
setwd('/Users/PM/Dropbox/Genome_scale_algorithms/Genome_scale_algorithms/Project1')
df_Naive = read.csv("Test ExactSubstring_Naive.csv", header = FALSE)
View(df_Naive)
df_KMP = read.csv("Test ExactSubstring_KMP.csv", header = FALSE)
colnames(df_Naive) = c("Function", "Time", "n", "m", "z", "RunName")
colnames(df_KMP) = c("Function", "Time", "n", "m", "z", "RunName")
df_Naive = read.csv("Test ExactSubstring_Naive.csv", names =  c("Function", "Time", "n", "m", "z", "RunName"))
?read.csv()
df_Naive = read.csv("Test ExactSubstring_Naive.csv", col.names =  c("Function", "Time", "n", "m", "z", "RunName"))
df_KMP = read.csv("Test ExactSubstring_KMP.csv", col.names =  c("Function", "Time", "n", "m", "z", "RunName"))
View(df_Naive)
library(dplyr)
df_Naive %>%
group_by(n,m) %>%
summarize(median_time = median(Time))
df_Naive %>%
group_by(n,m) %>%
summarize(median_time = median(Time)) -> summarized_data
View(summarized_data)
df_Naive
df_Naive = read.csv("Test ExactSubstring_Naive_bc-wc.csv", col.names =  c("Function", "Time", "n", "m", "z", "RunName"))
df_KMP = read.csv("Test ExactSubstring_KMP_bc-wc.csv", col.names =  c("Function", "Time", "n", "m", "z", "RunName"))
View(df_KMP)
df_Naive %>%
group_by(n,m) %>%
summarize(median_time = median(Time)) -> summarized_data
View(summarized_data)
df_Naive %>%
group_by(n,m, RunName == wc) %>%
summarize(median_time = median(Time)) -> summarized_data
df_Naive %>%
group_by(n,m, RunName == 'wc') %>%
summarize(median_time = median(Time)) -> summarized_data
df_Naive = read.csv("Test ExactSubstring_Naive_bc-wc.csv", col.names =  c("Function", "Time", "n", "m", "z", "RunName"))
df_KMP = read.csv("Test ExactSubstring_KMP_bc-wc.csv", col.names =  c("Function", "Time", "n", "m", "z", "RunName"))
df_Naive %>%
group_by(n,m, RunName == 'wc') %>%
summarize(median_time = median(Time)) -> summarized_data
View(summarized_data)
df_Naive %>%
filter(RunName == 'wc') %>%
group_by(n,m) %>%
summarize(median_time = median(Time)) -> summarized_data
View(summarized_data)
df_Naive %>%
filter(RunName == 'wc') %>%
)
df_Naive %>%
filter(RunName == 'wc')
class(df_Naive$RunName)
df_Naive %>%
filter(as.character(RunName) == 'wc')
sub_naive = subset(df_Naive, df_Naive$RunName == 'wc')
df_Naive = read.csv("Test ExactSubstring_Naive_bc-wc.csv", col.names =  c("Function", "Time", "n", "m", "z", "RunName"))
View(df_Naive)
sub_naive = subset(df_Naive, df_Naive$RunName == 'wc')
View(sub_naive)
df_Naive$RunName
?read.csv()
as.character(df_Naive$RunName)
df_Naive %>%
filter(as.character(RunName) == ' wc') %>%
group_by(n,m) %>%
summarize(median_time = median(Time)) -> summarized_data
View(summarized_data)
View(df_Naive)
median(c(5.282353e-04, 7.781937e-04, 5.184182e-04, 8.019812e-04))
hist(df_Naive$n)
df_Naive = read.csv("Test ExactSubstring_Naive_bc-wc.csv", col.names =  c("Function", "Time", "n", "m", "z", "RunName"))
df_KMP = read.csv("Test ExactSubstring_KMP_bc-wc.csv", col.names =  c("Function", "Time", "n", "m", "z", "RunName"))
View(df_Naive)
vcf.fn <- "/Users/PM/Dropbox/PG2018/exercises/PCA_admixture/hapmap/hapmap.vcf"
snpgdsVCF2GDS(vcf.fn, "/Users/PM/Downloads/hapmap/example2.gds",  method="biallelic.only")
snpgdsVCF2GDS(vcf.fn, "/Users/PM/Downloads/hapmap/data.gds",  method="biallelic.only")
snpgdsVCF2GDS(vcf.fn, "/Users/PM/Dropbox/PG2018/exercises/PCA_admixture/hapmap/data.gds",  method="biallelic.only")
genofile2 <- snpgdsOpen("/Users/PM/Dropbox/PG2018/exercises/PCA_admixture/hapmap/data.gds",  FALSE, TRUE, TRUE)
pca <- snpgdsPCA(genofile2)
summary(pca)
eigenvectors = as.data.frame(pca$eigenvect)
ggplot(data = eigenvectors, aes(x = V1, y = V2)) +
geom_point(size=3,alpha=0.5) +
scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D")) +
theme_bw() + coord_flip()
stats = read.csv('/Users/PM/Desktop/PHD_incomplete/Methods/Topology/Incongruent_phylogenies_updated.csv', header = TRUE)
nod_names = c('group4144.nw', 'group4143.nw', 'group4142.nw', 'group4141.nw', 'group4140.nw', 'group4139.nw', 'group4138.nw', 'group4137.nw', 'group4136.nw', 'group4135.nw', 'group4134.nw', 'group4131.nw', 'group4130.nw', 'group4129.nw', 'group4128.nw', 'group4127.nw', 'group4126.nw', 'group4125.nw', 'group4124.nw', 'group4123.nw', 'group4122.nw', 'group4121.nw', 'group4120.nw', 'group4119.nw', 'group2448.nw', 'group2140.nw')
real_names = c('nodX','nodN', 'nodM', 'nodL', 'nodE', 'nodF', 'nodD', 'nodA', 'nodC', 'nodI', 'nodJ', 'nifB', 'nifA', 'fixX','fixC', 'fixB', 'fixA', 'nifH', 'nifD', 'nifK', 'nifE', 'rpoB', 'recA')
names_convertor = as.data.frame(cbind(nod_names, real_names))
stats2 = stats[stats$n_genospecies >= 2,]
plot(table(stats2$discordance), main = 'Discordance distribution', xlab = 'Discordance score', ylab = 'Gene counts', xlim = c(0,79))
table(stats2$discordance)
as.data.frame(table(stats2$discordance)
)
disc = as.data.frame(table(stats2$discordance))
colnames(disc) = c('Discordance score', 'Gene counts')
ggplot(disc, aes(x='Discordance score', y = 'Gene counts')) + geom_bar(stat="identity")
colnames(disc) = c('Discordance score', 'Gene counts')
disc = as.data.frame(table(stats2$discordance))
colnames(disc) = c('Discordance score', 'Gene counts')
ggplot(disc, aes(x='Discordance score', y = 'Gene counts')) + geom_bar(stat="identity")
colnames(disc) = c('Discordance_score', 'Gene_counts')
disc = as.data.frame(table(stats2$discordance))
colnames(disc) = c('Discordance_score', 'Gene_counts')
disc
ggplot(disc, aes(x='Discordance score', y = 'Gene counts')) + geom_bar(stat="identity")
ggplot(disc, aes(x='Discordance_score', y = 'Gene_counts')) + geom_bar(y="identity")
ggplot(disc, aes(x='Discordance_score', y = 'Gene_counts')) + geom_bar(stat="identity")
disc
ggplot(disc, aes(x='Discordance_score', y = 'Gene_counts', fill=frau)) + geom_bar(stat="identity")
ggplot(disc, aes(x='Discordance_score', y = 'Gene_counts', fill=fraud)) + geom_bar(stat="identity")
ggplot(disc, aes(x='Discordance_score')) + geom_bar(y='Gene_counts')
disc
ggplot(disc, aes(x=Discordance_score,y=Gene_counts)) + geom_bar(y='Gene_counts')
ggplot(disc, aes(x=Discordance_score,y=Gene_counts)) + geom_bar()
ggplot(disc, aes(x=Discordance_score,y=Gene_counts)) + geom_bar(stat='identity')
ggplot(disc, aes(x=Discordance_score,y=Gene_counts)) + geom_bar(stat='identity') + geom_bw()
ggplot(disc, aes(x=Discordance_score,y=Gene_counts)) + geom_bar(stat='identity') + theme_bw()
plot(table(stats2$discordance), main = 'Discordance distribution', xlab = 'Discordance score', ylab = 'Gene counts', xlim = c(0,79))
text(y = 2500, x = 1, as.character(round(table(stats2$discordance)[1]/nrow(stats2), 3)))
text(y = 4000, x = 2, as.character(round(table(stats2$discordance)[2]/nrow(stats2), 3)))
text(y = 2000, x = 3, as.character(round(table(stats2$discordance)[3]/nrow(stats2), 3)))
subset_stats = subset(stats, stats$n_members >= 100 & stats$n_genospecies == 5)
plot(table(subset_stats$discordance), main = 'Distribution of subset', xlab = 'Discordance score', ylab = 'Counts')
legend(x = 40, y = 1500, inset=.07,
c("RpoB RecA","Symbiotic genes"), fill=c('blue', 'red'), horiz=F, cex=0.5)
a = vector()
for(i in 1:length(nod_names)){
print(nod_names[i])
a[i] = which(as.character(subset_stats$gene) == nod_names[i])
}
nod_cors = subset_stats[a,]
rug(nod_cors$discordance[1:24], ticksize = 0.03, side = 1, lwd = 1.5, col = 'red')
rug(nod_cors$discordance[25:26], ticksize = 0.03, side = 1, lwd = 1.5, col = 'blue')
stats = read.csv('/Users/PM/Desktop/Incongruent_analysis_updated/Incongruent_phylogenies_proteinortho_marni_corrected_fasta.csv', header = T)
stats2 = stats[stats$n_genospecies >= 2,]
disc = as.data.frame(table(stats2$discordance))
colnames(disc) = c('Discordance_score', 'Gene_counts')
ggplot(disc, aes(x=Discordance_score,y=Gene_counts)) + geom_bar(stat='identity') + theme_bw()
stats2 = stats[stats$n_genospecies >= 3,]
disc = as.data.frame(table(stats2$discordance))
colnames(disc) = c('Discordance_score', 'Gene_counts')
ggplot(disc, aes(x=Discordance_score,y=Gene_counts)) + geom_bar(stat='identity') + theme_bw()
discordance_score = read.csv('/Users/PM/Desktop/PHD_incomplete/Methods/Painting_chromosome/Incongruent_phylogenies.csv', header = T)
stats2 = stats[stats$n_genospecies >= 2,]
stats = read.csv('/Users/PM/Desktop/PHD_incomplete/Methods/Painting_chromosome/Incongruent_phylogenies.csv', header = T)
stats2 = stats[stats$n_genospecies >= 2,]
plot(table(stats2$discordance), main = 'Discordance distribution', xlab = 'Discordance score', ylab = 'Gene counts', xlim = c(0,79))
text(y = 2500, x = 1, as.character(round(table(stats2$discordance)[1]/nrow(stats2), 3)))
text(y = 4000, x = 2, as.character(round(table(stats2$discordance)[2]/nrow(stats2), 3)))
text(y = 2000, x = 3, as.character(round(table(stats2$discordance)[3]/nrow(stats2), 3)))
stats2 = read.csv('/Users/PM/Desktop/PHD_incomplete/Methods/Painting_chromosome/Incongruent_phylogenies.csv', header = T)
View(stats2)
stats2 = read.csv('/Users/PM/Desktop/PHD_incomplete/Methods/Painting_chromosome/Incongruent_phylogenies.csv', header = T)
stats2 = stats[stats$n_genospecies >= 2,]
plot(table(stats2$discordance_marni), main = 'Discordance distribution', xlab = 'Discordance score', ylab = 'Gene counts', xlim = c(0,79))
text(y = 2500, x = 1, as.character(round(table(stats2$discordance_marni)[1]/nrow(stats2), 3)))
text(y = 4000, x = 2, as.character(round(table(stats2$discordance)[2]/nrow(stats2), 3)))
text(y = 4000, x = 2, as.character(round(table(stats2$discordance_marni)[2]/nrow(stats2), 3)))
text(y = 2000, x = 3, as.character(round(table(stats2$discordance_marni)[3]/nrow(stats2), 3)))
disc = as.data.frame(table(stats2$discordance_marni))
colnames(disc) = c('Discordance_score', 'Gene_counts')
ggplot(disc, aes(x=Discordance_score,y=Gene_counts)) + geom_bar(stat='identity') + theme_bw()
plot(table(stats2$discordance, main = 'Discordance distribution', xlab = 'Discordance score', ylab = 'Gene counts', xlim = c(0,79))
text(y = 2500, x = 1, as.character(round(table(stats2$discordance_marni)[1]/nrow(stats2), 3)))
text(y = 4000, x = 2, as.character(round(table(stats2$discordance_marni)[2]/nrow(stats2), 3)))
text(y = 2000, x = 3, as.character(round(table(stats2$discordance_marni)[3]/nrow(stats2), 3)))
# GGplot version
disc = as.data.frame(table(stats2$discordance_marni))
colnames(disc) = c('Discordance_score', 'Gene_counts')
ggplot(disc, aes(x=Discordance_score,y=Gene_counts)) + geom_bar(stat='identity') + theme_bw()
```
text(y = 2500, x = 1, as.character(round(table(stats2$discordance)[1]/nrow(stats2), 3)))
plot(table(stats2$discordance), main = 'Discordance distribution', xlab = 'Discordance score', ylab = 'Gene counts', xlim = c(0,79))
text(y = 2500, x = 1, as.character(round(table(stats2$discordance)[1]/nrow(stats2), 3)))
text(y = 4000, x = 2, as.character(round(table(stats2$discordance)[2]/nrow(stats2), 3)))
text(y = 2000, x = 3, as.character(round(table(stats2$discordance)[3]/nrow(stats2), 3)))
disc = as.data.frame(table(stats2$discordance))
colnames(disc) = c('Discordance_score', 'Gene_counts')
table(stats2$discordance_marni)
stats2$discordance_marni
table(stats2$discordance_marni)
disc = as.data.frame(table(stats2$discordance_marni))
colnames(disc) = c('Discordance_score', 'Gene_counts')
ggplot(disc, aes(x=Discordance_score,y=Gene_counts)) + geom_bar(stat='identity') + theme_bw()
gc_sinteny = read.csv('/Users/PM/Desktop/scripts_Asger/Rhizobium_analysis/scripts_figures/myproject.poff.izabel')
View(gc_sinteny)
gc_sinteny = read.csv('/Users/PM/Desktop/scripts_Asger/Rhizobium_analysis/scripts_figures/myproject.poff.izabel', sep = ';')
View(gc_sinteny)
View(gc_sinteny)
stats2 = read.csv('/Users/PM/Desktop/PHD_incomplete/Methods/Painting_chromosome/Incongruent_phylogenies.csv', header = T)
View(gc_sinteny)
test = merge(gc_sinteny, stats2, by.x= 'ID', by.y='gene')
stats2$gene = sub(".nw", "", stats2$gene)
test = merge(gc_sinteny, stats2, by.x= 'ID', by.y='gene')
View(test)
write.csv(test, 'presence_absence_extra_data.csv', test[,c('ID', 'GC3s', 'Synteny', 'discordance_marni', 'n_genospecies', 'n_members')])
test[,c('ID', 'GC3s', 'Synteny', 'discordance_marni', 'n_genospecies', 'n_members')]
write.csv('presence_absence_extra_data.csv', test[,c('ID', 'GC3s', 'Synteny', 'discordance_marni', 'n_genospecies', 'n_members')])
write.csv(file = 'presence_absence_extra_data.csv', test[,c('ID', 'GC3s', 'Synteny', 'discordance_marni', 'n_genospecies', 'n_members')])
write.csv(file = '/Users/PM/Desktop/scripts_Asger/Rhizobium_analysis/scripts_figures/presence_absence_extra_data.csv', test[,c('ID', 'GC3s', 'Synteny', 'discordance_marni', 'n_genospecies', 'n_members')])
presence_absence = read.csv('/Users/PM/Desktop/scripts_Asger/Rhizobium_analysis/scripts_figures/"presence_absence_matrix_by_genospecies_new_dataset_all_final')
presence_absence = read.csv('/Users/PM/Desktop/scripts_Asger/Rhizobium_analysis/scripts_figures/"presence_absence_matrix_by_genospecies_new_dataset_all_final.csv')
presence_absence = read.csv('/Users/PM/Desktop/scripts_Asger/Rhizobium_analysis/scripts_figures/presence_absence_matrix_by_genospecies_new_dataset_all_final.csv')
View(presence_absence)
presence_absence = read.csv('/Users/PM/Desktop/scripts_Asger/Rhizobium_analysis/scripts_figures/presence_absence_matrix_by_genospecies_new_dataset_all_final.csv',row.names = 1)
View(presence_absence)
heatmap(as.matrix(presence_absence*transpose(presence_absence)))
heatmap(as.matrix(presence_absence*t(presence_absence)))
ggplot(data = eigenvectors, aes(x = V1, y = V2)) +
geom_point(size=3,alpha=0.5) +
scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D")) +
theme_bw() + coord_flip()
pca_percent <- pca$varprop*100
qplot(y = pca_percent, x = seq(1, length(pca$eigenval))) + geom_line() + geom_point() + theme_bw() + xlab("PC's") + ylab("Variance explained (%)")
pca$eigenval
summary(pca)
qplot(y = pca_percent, x = seq(1, length(pca$eigenval[1:28]))) + geom_line() + geom_point() + theme_bw() + xlab("PC's") + ylab("Variance explained (%)")
pca$eigenval[1:28]
qplot(y = pca_percent[1:28], x = seq(1, length(pca$eigenval[1:28]))) + geom_line() + geom_point() + theme_bw() + xlab("PC's") + ylab("Variance explained (%)")
sum(pca_percent[1:28])
pca_percent[1:28]
pca_percent
ca = c(5778, 1082, 304+22+47+338+392+738+122+61+66+1141+332+258+179+31)
Genospecies     <- c(rep(c("A", "B", "C", "D", "E"), each = 4))
Category <- c(rep(c("Core", "Private Accessory","Accessory", "Private Core"), times = 5))
Frequency <- c(5778, 1063, 4031, 19, 5778, 898-82, 4176,82, 5778, 3567-27, 6901,27, 5778, 202-37, 2534, 37, 5778, 447-41, 263, 41)
Data      <- data.frame(Genospecies, Category, Frequency)
Data
ca
ggplot(Data, aes(x = Genospecies, y = Frequency, label = Frequency, fill = Category)) +
geom_bar(stat = "identity") +
geom_text(size = 3, position = position_stack(vjust = 0.6)) + theme_classic()
gsA_private accessory = 381 + 24 + 55 + 322 + 406 + 737 + 175 + 71 + 70 + 1544 + 378 + 299 + 198 )
gsA_private_accessory = 381 + 24 + 55 + 322 + 406 + 737 + 175 + 71 + 70 + 1544 + 378 + 299 + 198 )
gsA_private_accessory = 381 + 24 + 55 + 322 + 406 + 737 + 175 + 71 + 70 + 1544 + 378 + 299 + 198
ca = c(5778, 1082, 304+22+47+338+392+738+122+61+66+1141+332+258+179+31)
ca
1082-19
10891 - 5778
A_accessory = 11621 - 5045
A_accessory
A_accessory = 11621 - 5045
A_accessory
gsA_private_accessory = 381 + 24 + 55 + 322 + 406 + 737 + 175 + 71 + 70 + 1544 + 378 + 299 + 198
gsA_private_accessory
A_accessory = 11621 - 5045 - 1245
A_accessory
B_accessory = 24 + 55 + 322 + 406 + 737 + 79 + 120 + 1522 + 199 + 257 + 378 + 309 + 30
B_accessory
A_accessory
A_accessory + 5686 + 1245
5045 - 5686
5045 - 4690 - 1245
5686 - 5045
