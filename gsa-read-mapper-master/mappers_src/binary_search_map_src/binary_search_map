#!/usr/bin/env python

from sys import argv
from SamRow import SamRow
from parsers import fasta_parser, fastq_parser, from_strings_to_cigar

# Constructing the array in the naive way: (On * n log n)
def build_array_naive(string):
	#string = string.strip('\n')
	zero_index = sorted(range(len(string)), key=lambda i: string[i:]) # sorting suffixes by alphabethic order
	return zero_index


def binary_search(pat, text, suffix_array):
    '''
    A suffix array based search function for a given pattern (pattern) in a given text (text) using
    the suffix array build by the function build_array_naive
    '''
    m = len(pat)  # lenght of the pattern
    n = len(text + '$')  # length of the text

    # Starting binary search:
    l = 0  # left index
    r = n  # right index

    # Find left most interval of the suffix array
    while (l < r):

        mid = (l + r) / 2  # middle array

        if pat > text[suffix_array[mid]:(suffix_array[mid] + len(pat))]:
            l = mid + 1
        else:
            r = mid

    # Find the right most interval of the suffix array
    s = l
    r = n
    while (l < r):
        mid = (l + r) / 2
        if pat < text[suffix_array[mid]:(suffix_array[mid] + len(pat))]:
            r = mid
        else:
            l = mid + 1

    if r < max(suffix_array): # dealing with the indexing in python
        zero_indexed = suffix_array[s:r]
        one_indexed = [x + 1 for x in zero_indexed]
 
        return(sorted(one_indexed[::-1]))
    else:
        zero_indexed = suffix_array[s:r+1]
        one_indexed = [x + 1 for x in zero_indexed]

        return(sorted(one_indexed[::-1]))


nameOfFile = argv[0] #not used
d_argument = argv[1]
d_argument_param = argv[2]
dictFasta = fasta_parser(argv[3])
dictFastq = fastq_parser(argv[4])
refName = dictFasta.keys()[0]

text = dictFasta[refName]
keys = dictFastq.keys()

suffix_array = build_array_naive(text + '$')

for key in keys:
    matches = binary_search(dictFastq[key][0], text, suffix_array)
    for match in matches:
        if match != []:
            # TODO: PRODUCE ACTUAL CIGAR!
            samRow = SamRow(refName, key, match, str(len(dictFastq[key][0])) + "M", dictFastq[key][0], dictFastq[key][1])
            samRow.writeSamRow("binary_search_map.sam")
