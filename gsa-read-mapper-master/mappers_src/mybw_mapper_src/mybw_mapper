#!/usr/bin/env python
from sys import argv
from SamRow import SamRow
from parsers import fasta_parser,fastq_parser
import deepdish as dd

def produceCigar(text, pattern, indexes):
    longCigar = ""
    cigar = ""
    cnt = 0
    editDistance = 0
    # Just append M,D or I depending on alignment
    for c in pattern:
        if c == text[indexes-1 + cnt]:
            longCigar += "M"
            cnt = cnt + 1
        else:
            editDistance = editDistance + 1
            longCigar += "D" # TODO: D or I

    # compress M,I,D
    cnt = 0
    for char in longCigar:
        if char == longCigar[cnt]:
            cnt = cnt + 1
        else:
            cigar = cigar + str(cnt) + char

        if cnt == len(longCigar)-1: # check the last character
            cigar = cigar + str(cnt+1) + char
    return editDistance, cigar

def search_bw(suffix_array, text, pat, O, C):
    m = len(pat)  # lenght of the pattern
    n = len(text + '$')  # length of the text

    l = 0
    r = n - 1
    i = m - 1

    while (i >= 0 and l <= r):

        c = pat[i]

        if l - 1 < 0:  # dealing with negative indexes
            try:
                l = C[c] + 1 # here trying to deal with letters that are not present in the text
            except:

                return(None)
        else:
            l = C[c] + O[c][l - 1] + 1

        r = C[c] + O[c][r]

        i = i - 1

    if i < 0 and l <= r:
        zero_indexed = suffix_array[l:r + 1]
        one_indexed = [x + 1 for x in zero_indexed]
        return(sorted(one_indexed)) # sorting just to look exact as required
    else:
        zero_indexed = suffix_array[l:r + 1]
        return(sorted(zero_indexed))


# Reading the preprocessed files:
O_table = dd.io.load('../evaluation/O_table.h5')
C_table = dd.io.load('../evaluation/C_table.h5')
suffix_array = dd.io.load('../evaluation/suffix_array.h5')

# Reading data:
nameOfFile = argv[0] #not in exact
d_argument = argv[1] # not in exact
d_argument_param = argv[2] # not in exact
dictFasta = fasta_parser(argv[3])
dictFastq = fastq_parser(argv[4])

refName = dictFasta.keys()[0]
text = dictFasta[refName]
keys = dictFastq.keys()

if d_argument_param == 0:
    for key in keys:
        matches = search_bw(suffix_array, text, dictFastq[key][0], O_table, C_table)
        for match in matches:
            #print match
            if match != []:
                d, cigar = produceCigar(text, dictFastq[key][0], match)
                samRow = SamRow(refName, key, match, cigar, dictFastq[key][0], dictFastq[key][1])
                samRow.writeSamRow("mybw_mapper.sam")
else:
    for key in keys:
        matches = search_bw(suffix_array, text, dictFastq[key][0], O_table, C_table)
        for match in matches:
            # print match
            if match != []:
                d, cigar = produceCigar(text, dictFastq[key][0], match)

                if d <= d_argument_param:
                    samRow = SamRow(refName, key, match, cigar, dictFastq[key][0], dictFastq[key][1])
                    samRow.writeSamRow("mybw_mapper.sam")